"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –±–æ—Ç–∞ –∫–ª—É–±–∞ X10.
"""
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from database import Database
from config import Config
from utils import kick_user_from_group, get_subscription_end_text, get_user_name
from keyboards import extend_subscription_kb, club_menu_kb

logger = logging.getLogger(__name__)

class ScheduledTasks:
    def __init__(self, bot: Bot, db: Database, config: Config):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
        :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
        :param db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        :param config: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.bot = bot
        self.db = db
        self.config = config
        self.scheduler = AsyncIOScheduler()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
        self._init_tasks()

    def _init_tasks(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00)
        self.scheduler.add_job(
            self._check_expiring_subscriptions,
            CronTrigger(hour=12, minute=0),
            name="check_expiring_subscriptions"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–π —á–∞—Å)
        self.scheduler.add_job(
            self._check_expired_subscriptions,
            IntervalTrigger(hours=1),
            name="check_expired_subscriptions"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00)
        self.scheduler.add_job(
            self._send_referral_reminders,
            CronTrigger(hour=10, minute=0),
            name="send_referral_reminders"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü 1-–≥–æ —á–∏—Å–ª–∞ –≤ 9:00)
        self.scheduler.add_job(
            self._send_limited_offers,
            CronTrigger(day=1, hour=9, minute=0),
            name="send_limited_offers"
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:05)
        self.scheduler.add_job(
            self._update_statistics,
            CronTrigger(hour=0, minute=5),
            name="update_statistics"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 09:00)
        self.scheduler.add_job(
            self._check_user_activity,
            CronTrigger(day_of_week='mon', hour=9, minute=0),
            name="check_user_activity"
        )

    def start(self):
        """
        –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
        """
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

    def shutdown(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
        """
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _check_expiring_subscriptions(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —á–µ—Ä–µ–∑ 3 –∏ 1 –¥–µ–Ω—å
        """
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")

        for days in [3, 1]:
            expiring = await self.db.get_expiring_subscriptions(days)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(expiring)} –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π")

            for sub in expiring:
                user_id = sub['user_id']
                try:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await self.bot.send_message(
                        user_id,
                        get_subscription_end_text(user_id, days),
                        reply_markup=extend_subscription_kb()
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def _check_expired_subscriptions(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        """
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")

        expired = await self.db.get_expired_subscriptions()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(expired)} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")

        for sub in expired:
            user_id = sub['user_id']
            subscription_id = sub['subscription_id']

            try:
                # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                await self.db.deactivate_subscription(subscription_id)

                # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
                kick_result = await kick_user_from_group(self.bot, self.config, user_id)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.bot.send_message(
                    user_id,
                    get_subscription_end_text(user_id, 0),
                    reply_markup=club_menu_kb()
                )

                if kick_result:
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.")
                else:
                    logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def _send_referral_reminders(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
        """
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with self.db.get_conn() as conn:
                cursor = await conn.execute("SELECT user_id FROM users WHERE registration_date < datetime('now', '-3 day')")
                users = await cursor.fetchall()

            bot_info = await self.bot.get_me()

            for user in users:
                user_id = user[0]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                referrals_count = await self.db.count_user_referrals(user_id)

                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–µ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –ø—Ä–æ—à–ª–æ 3 –¥–Ω—è —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                if referrals_count < 5:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                    from utils import generate_ref_link
                    ref_link = generate_ref_link(bot_info.username, user_id)

                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = await self.db.get_user(user_id)
                    user_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    try:
                        await self.bot.send_message(
                            user_id,
                            f"üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user_name}\n\n"
                            f"–ù–µ –∑–∞–±—ã–ª–∏ –æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ?\n\n"
                            f"–í–æ—Ç –æ–Ω–∞: {ref_link}\n\n"
                            f"üí° –°–æ–≤–µ—Ç: –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø–æ–¥–ø–∏—Å—å Telegram –∏–ª–∏ –¥–µ–ª–∏—Ç–µ—Å—å –≤ —á–∞—Ç–∞—Ö —Å –¥—Ä—É–∑—å—è–º–∏.\n\n"
                            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
                            f"üéØ 1 –¥—Ä—É–≥ ‚Äì 1000 –±–∞–ª–ª–æ–≤ (1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å)\n"
                            f"üéØ 3 –¥—Ä—É–≥–∞ ‚Äì –¥–æ—Å—Ç—É–ø –∫ VIP –ø—Ä–æ–¥—É–∫—Ç—É —ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –í—å–µ—Ç–Ω–∞–º—É\n"
                            f"üéØ 5 –¥—Ä—É–∑–µ–π ‚Äì –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –ö–ª—É–±–µ –•10\n"
                            f"üéØ 10 –¥—Ä—É–∑–µ–π ‚Äì –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º –ö–ª—É–±–∞ –•10",
                            reply_markup=None  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ: {e}")

    async def _send_limited_offers(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
        """
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
            async with self.db.get_conn() as conn:
                cursor = await conn.execute("""
                    SELECT u.user_id, u.first_name 
                    FROM users u
                    JOIN referrals r ON u.user_id = r.referrer_id
                    GROUP BY u.user_id
                    HAVING COUNT(r.user_id) >= 1
                """)
                users = await cursor.fetchall()

            bot_info = await self.bot.get_me()

            for user in users:
                user_id = user[0]
                user_name = user[1] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                from utils import generate_ref_link
                ref_link = generate_ref_link(bot_info.username, user_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                try:
                    await self.bot.send_message(
                        user_id,
                        f"‚è≥ –¢–æ–ª—å–∫–æ 24 —á–∞—Å–∞!\n\n"
                        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ\n"
                        f"–≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ (2000 –≤–º–µ—Å—Ç–æ 1000).\n"
                        f"(1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å)\n\n"
                        f"–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å: {ref_link}",
                        reply_markup=None  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")

    async def _update_statistics(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
        """
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with self.db.get_conn() as conn:
                cursor = await conn.execute("SELECT COUNT(*) FROM users")
                total_users = (await cursor.fetchone())[0]

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                cursor = await conn.execute(
                    "SELECT COUNT(*) FROM subscriptions WHERE status = 'active' AND end_date > datetime('now')"
                )
                active_subscriptions = (await cursor.fetchone())[0]

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                cursor = await conn.execute("SELECT COUNT(*) FROM referrals")
                total_referrals = (await cursor.fetchone())[0]

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –¥–µ–Ω—å
                cursor = await conn.execute(
                    "SELECT COUNT(*) FROM payments WHERE date(created_at) = date('now', '-1 day')"
                )
                daily_payments = (await cursor.fetchone())[0]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            stats_message = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –∑–∞ {(datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')}:\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n"
                f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n"
                f"üí∞ –ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ –¥–µ–Ω—å: {daily_payments}"
            )

            for admin_id in self.config.bot.admin_ids:
                try:
                    await self.bot.send_message(admin_id, stats_message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def _check_user_activity(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
        """
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –±–æ—Ç–æ–º –±–æ–ª–µ–µ 7 –¥–Ω–µ–π
            # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
            async with self.db.get_conn() as conn:
                cursor = await conn.execute("""
                    SELECT u.user_id, u.first_name 
                    FROM users u
                    JOIN subscriptions s ON u.user_id = s.user_id
                    WHERE s.status = 'active' AND s.end_date > datetime('now')
                """)
                users = await cursor.fetchall()

            for user in users:
                user_id = user[0]
                user_name = user[1] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                try:
                    await self.bot.send_message(
                        user_id,
                        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
                        f"–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –∫ –Ω–∞–º, —É –Ω–∞—Å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ:\n\n"
                        f"- –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –∑–∞–∫—Ä—ã—Ç–æ–º —á–∞—Ç–µ\n"
                        f"- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è\n"
                        f"- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏\n\n"
                        f"–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –º–∞–∫—Å–∏–º—É–º—É!",
                        reply_markup=None  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    async def run_startup_tasks(self):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        """
        logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await self._check_expired_subscriptions()

        logger.info("–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

    async def get_conn(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
        """
        return await self.db.get_conn()