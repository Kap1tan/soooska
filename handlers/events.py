"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –±–æ—Ç–∞ –∫–ª—É–±–∞ X10.
"""
import logging
import io
import qrcode
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import Database
from config import Config
from keyboards import (
    events_kb, payment_methods_kb, main_menu_kb, payment_confirmation_kb,
    stars_payment_kb, need_help_kb, crypto_currency_kb, crypto_payment_confirmation_kb
)
from utils import get_user_name, get_payment_description, parse_callback_data

router = Router()
logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class EventStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    payment_confirmation = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
    crypto_confirmation = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–π (–æ–∂–∏–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)


@router.callback_query(F.data == "events")
async def callback_events(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    """
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:",
        reply_markup=events_kb()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("event:"))
async def callback_event(callback: CallbackQuery, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    """
    event_type = callback.data.split(':')[1]

    if event_type == "vietnam":
        # –≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –í—å–µ—Ç–Ω–∞–º—É
        event_title = "–≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –í—å–µ—Ç–Ω–∞–º—É"
        event_description = (
            "VIP –ø—Ä–æ–¥—É–∫—Ç - –≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –í—å–µ—Ç–Ω–∞–º—É üå¥\n\n"
            "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –æ–Ω–ª–∞–π–Ω-—ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ —Å–∞–º—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –º–µ—Å—Ç–∞–º –í—å–µ—Ç–Ω–∞–º–∞ —Å –Ω–∞—à–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º.\n\n"
            "–í—ã —É–∑–Ω–∞–µ—Ç–µ:\n"
            "- –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞, –æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø–∏—à—É—Ç –≤ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è—Ö\n"
            "- –ö–∞–∫ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –≤–æ –í—å–µ—Ç–Ω–∞–º\n"
            "- –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π\n\n"
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 —á–∞—Å–∞\n"
            "–§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 1000 —Ä—É–±–ª–µ–π"
        )
    elif event_type == "consultation":
        # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
        event_title = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º"
        event_description = (
            "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º –ö–ª—É–±–∞ –•10 üåü\n\n"
            "–≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n"
            "- –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è\n"
            "- –†–µ—à–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º —ç–∫—Å–ø–µ—Ä—Ç–∞\n"
            "- –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π\n\n"
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å\n"
            "–§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 2000 —Ä—É–±–ª–µ–π"
        )
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        await callback.message.edit_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.",
            reply_markup=events_kb()
        )
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_event:{event_type}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="events")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        f"{event_title}\n\n{event_description}",
        reply_markup=markup
    )
    await callback.answer()


@router.callback_query(F.data.startswith("pay_event:"))
async def callback_pay_event(callback: CallbackQuery, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    """
    event_type = callback.data.split(':')[1]

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_methods_kb(event_type)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("pay_method:"))
async def callback_pay_method_event(callback: CallbackQuery, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    """
    user_id = callback.from_user.id
    callback_data = parse_callback_data(callback.data)

    product_type = callback_data.get("product")
    payment_method = callback_data.get("method")

    if payment_method == "back":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –º–µ—Ç–æ–¥–∞—Ö –æ–ø–ª–∞—Ç—ã
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:",
            reply_markup=events_kb()
        )
        await callback.answer()
        return

    if not product_type or not payment_method:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_kb()
        )
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    payment_info = get_payment_description(product_type, config)
    amount = payment_info["amount"]

    if payment_method == "crypto":
        # –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã {payment_info['name']}:",
            reply_markup=crypto_currency_kb(product_type)
        )
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    payment_id = await db.create_payment(
        user_id,
        amount,
        product_type,
        payment_method
    )

    if payment_method == "card":
        # –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        payment_details = f"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: {config.payment.payment_details.get('–ö–∞—Ä—Ç–∞ –†–§ (–°–±–µ—Ä–±–∞–Ω–∫)')}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        message_text = (
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_details}\n\n"
            f"–í—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ:\n"
            f"–°—É–º–º–∞: {payment_info['amount']} —Ä—É–±–ª–µ–π\n"
            f"–ü—Ä–æ–¥—É–∫—Ç: {payment_info['name']}\n"
            f"–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã, "
            f"–º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–∞—Ö."
        )

        await callback.message.edit_text(
            message_text,
            reply_markup=payment_confirmation_kb(payment_id)
        )

    elif payment_method == "stars":
        # –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ Telegram
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ –∑–≤–µ–∑–¥—ã (1000—Ä = 750 –∑–≤–µ–∑–¥)
        stars_amount = int(amount * 0.75)  # 75% –æ—Ç —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö

        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É Telegram Stars\n\n"
            f"–°—É–º–º–∞: {stars_amount} ‚≠ê (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç {amount} —Ä—É–±.)\n"
            f"–ü—Ä–æ–¥—É–∫—Ç: {payment_info['name']}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å {stars_amount} ‚≠ê' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
        await callback.message.answer_invoice(
            title=f"–û–ø–ª–∞—Ç–∞ {payment_info['name']}",
            description=f"{payment_info['description']}",
            payload=f"payment_{payment_id}",
            provider_token="",  # –î–ª—è Telegram Stars –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            currency="XTR",  # –í–∞–ª—é—Ç–∞ –¥–ª—è Telegram Stars
            prices=[LabeledPrice(label=payment_info['name'], amount=stars_amount)],
            reply_markup=stars_payment_kb(stars_amount, payment_id)
        )

    await callback.answer()


@router.callback_query(F.data.startswith("crypto:"))
async def callback_crypto_currency_event(callback: CallbackQuery, bot: Bot, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    """
    user_id = callback.from_user.id
    callback_data = callback.data.split(':')

    if len(callback_data) != 3:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_kb()
        )
        await callback.answer()
        return

    product_type = callback_data[1]
    currency = callback_data[2]  # BTC, ETH, USDT, TRX

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    payment_info = get_payment_description(product_type, config)
    amount_rub = payment_info["amount"]

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    crypto_rate = config.payment.crypto.rates.get(currency, 0)
    wallet_address = config.payment.crypto.wallets.get(currency, "")

    if crypto_rate == 0 or not wallet_address:
        await callback.message.edit_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
            reply_markup=payment_methods_kb(product_type)
        )
        await callback.answer()
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    crypto_amount = round(amount_rub / crypto_rate, 8)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    payment_method = f"crypto_{currency}"
    payment_id = await db.create_payment(
        user_id,
        amount_rub,
        product_type,
        payment_method
    )

    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(wallet_address)
    qr.make(fit=True)

    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞
    img = qr.make_image(fill_color="black", back_color="white")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    img_byte_arr = io.BytesIO()
    img.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    qr_file = BufferedInputFile(img_byte_arr.getvalue(), filename=f"payment_{payment_id}_qr.png")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ —Å QR-–∫–æ–¥–æ–º
    await callback.message.answer_photo(
        photo=qr_file,
        caption=(
            f"–û–ø–ª–∞—Ç–∞ {payment_info['name']} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π {currency}\n\n"
            f"–°—É–º–º–∞: {crypto_amount} {currency} (‚âà{amount_rub} —Ä—É–±.)\n"
            f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: `{wallet_address}`\n\n"
            f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É {crypto_amount} {currency} –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å\n"
            f"2. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n"
            f"3. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TxID)\n\n"
            f"–í–Ω–∏–º–∞–Ω–∏–µ: –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        ),
        reply_markup=crypto_payment_confirmation_kb(payment_id)
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π {currency}. QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb()
    )

    await callback.answer()


@router.callback_query(F.data.startswith("confirm_crypto:"))
async def callback_confirm_crypto_event(callback: CallbackQuery, state: FSMContext, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    """
    payment_id = int(callback.data.split(':')[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = await db.get_payment(payment_id)

    if not payment:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=main_menu_kb()
        )
        await callback.answer()
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await state.set_state(EventStates.crypto_confirmation)
    await state.update_data(payment_id=payment_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TxID) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ TxID –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –±–∏—Ä–∂–∏."
    )

    await callback.answer()


@router.message(EventStates.crypto_confirmation)
async def process_crypto_confirmation_event(message: Message, state: FSMContext, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    """
    data = await state.get_data()
    payment_id = data.get('payment_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (TxID)
    if not message.text:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TxID).\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
            reply_markup=need_help_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = await db.get_payment(payment_id)

    if not payment:
        await message.answer(
            "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
        return

    tx_id = message.text.strip()
    current_payment_method = payment.get('payment_method', '')

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ, –¥–æ–±–∞–≤–ª—è—è TxID –∫ –∑–Ω–∞—á–µ–Ω–∏—é –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    conn = await db.get_conn()
    try:
        new_payment_method = f"{current_payment_method}_TxID:{tx_id}"
        await conn.execute(
            "UPDATE payments SET payment_method = ? WHERE payment_id = ?",
            (new_payment_method, payment_id)
        )
        await conn.commit()
    finally:
        await conn.close()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ TxID
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        "–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤.",
        reply_markup=main_menu_kb()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    for admin_id in config.bot.admin_ids:
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            payment_method = payment.get('payment_method', '')

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            currency = payment_method.split('_')[1] if '_' in payment_method else 'Unknown'

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_id = payment.get('user_id')
            user = await db.get_user(user_id)
            username = user.get('username', '') if user else ''
            first_name = user.get('first_name', '') if user else ''
            last_name = user.get('last_name', '') if user else ''

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_link = f"@{username}" if username else f"tg://user?id={user_id}"
            user_display = f"{first_name} {last_name}".strip() or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

            admin_notification = (
                f"üí∞ –ù–æ–≤—ã–π –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –∑–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
                f"–ü–ª–∞—Ç–µ–∂ ID: {payment_id}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"
                f"–°—Å—ã–ª–∫–∞: {user_link}\n"
                f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {payment.get('product_type')}\n"
                f"–°—É–º–º–∞: {payment.get('amount')} —Ä—É–±.\n"
                f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {currency}\n"
                f"TxID: {tx_id}\n\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /confirm_payment_{payment_id}"
            )

            await message.bot.send_message(
                chat_id=admin_id,
                text=admin_notification
            )

            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {payment_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data == "cancel_payment")
async def callback_cancel_payment_event(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã
    """
    await state.clear()

    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(
        "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )

    await callback.answer()


@router.callback_query(F.data.startswith("confirm_payment:"))
async def callback_confirm_payment_event(callback: CallbackQuery, state: FSMContext, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    """
    payment_id = int(callback.data.split(':')[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = await db.get_payment(payment_id)

    if not payment:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=main_menu_kb()
        )
        await callback.answer()
        return

    # –î–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(EventStates.payment_confirmation)
    await state.update_data(payment_id=payment_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )

    await callback.answer()


@router.pre_checkout_query()
async def pre_checkout_handler_event(pre_checkout_query: PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    """
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def successful_payment_handler_event(message: Message, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    """
    payment_payload = message.successful_payment.invoice_payload

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ payload
    if payment_payload.startswith("payment_"):
        payment_id = int(payment_payload.split("_")[1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment = await db.get_payment(payment_id)

        if not payment:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                reply_markup=main_menu_kb()
            )
            return

        user_id = payment.get('user_id')
        product_type = payment.get('product_type')

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        await db.confirm_payment(payment_id)

        # –î–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! üéâ\n\n"
            "–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
            "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.",
            reply_markup=main_menu_kb()
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
        for admin_id in config.bot.admin_ids:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user = await db.get_user(user_id)
                username = user.get('username', '') if user else ''
                first_name = user.get('first_name', '') if user else ''
                last_name = user.get('last_name', '') if user else ''

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_link = f"@{username}" if username else f"tg://user?id={user_id}"
                user_display = f"{first_name} {last_name}".strip() or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

                await message.bot.send_message(
                    admin_id,
                    f"–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∑–≤–µ–∑–¥–∞–º–∏ –∑–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"
                    f"–°—Å—ã–ª–∫–∞: {user_link}\n"
                    f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                    f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {product_type}\n"
                    f"–°—É–º–º–∞: {payment.get('amount')} —Ä—É–±. ({int(payment.get('amount') * 0.75)} –∑–≤–µ–∑–¥)\n"
                    f"–°—Ç–∞—Ç—É—Å: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")


@router.message(EventStates.payment_confirmation)
async def process_event_payment_confirmation(message: Message, state: FSMContext, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    """
    data = await state.get_data()
    payment_id = data.get('payment_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if not message.photo and not message.document:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
            reply_markup=need_help_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = await db.get_payment(payment_id)

    if not payment:
        await message.answer(
            "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        reply_markup=main_menu_kb()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    for admin_id in config.bot.admin_ids:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_id = message.from_user.id
            user = await db.get_user(user_id)
            username = user.get('username', '') if user else message.from_user.username
            first_name = user.get('first_name', '') if user else message.from_user.first_name
            last_name = user.get('last_name', '') if user else message.from_user.last_name

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_link = f"@{username}" if username else f"tg://user?id={user_id}"
            user_display = f"{first_name} {last_name}".strip() or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
            caption = (
                f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"
                f"–°—Å—ã–ª–∫–∞: {user_link}\n"
                f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                f"–ü–ª–∞—Ç–µ–∂ ID: {payment_id}\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {payment.get('product_type')}\n"
                f"–°—É–º–º–∞: {payment.get('amount')} —Ä—É–±–ª–µ–π\n\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /confirm_payment_{payment_id}"
            )

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if message.photo:
                await message.bot.send_photo(
                    chat_id=admin_id,
                    photo=message.photo[-1].file_id,
                    caption=caption
                )
            elif message.document:
                await message.bot.send_document(
                    chat_id=admin_id,
                    document=message.document.file_id,
                    caption=caption
                )

            logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ –ø–ª–∞—Ç–µ–∂–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from keyboards import need_help_kb